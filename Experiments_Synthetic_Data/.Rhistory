NL_Test_stanResiduals_ARIMAGARCH <- nonlinearityTest(stanResiduals_ARIMAGARCH, verbose = TRUE)
train_close <- read.csv("train_close_own_data_square.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
train_logclose <- read.csv("train_logclose_own_data_square.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
train_logreturns <- read.csv("train_logreturns_own_data_square.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA_own_data_squared.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
rawResiduals_ARIMA_FNN <- read.csv("rawResiduals_ARIMA_FNN_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA_FNN <- rawResiduals_ARIMA_FNN$V1
NL_Test_rawResiduals_ARIMA_FNN <- nonlinearityTest(rawResiduals_ARIMA_FNN, verbose = TRUE)
rawResiduals_ARIMA_SVR <- read.csv("rawResiduals_ARIMA_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA_SVR <- rawResiduals_ARIMA_SVR$V1
NL_Test_rawResiduals_ARIMA_SVR <- nonlinearityTest(rawResiduals_ARIMA_SVR, verbose = TRUE)
train_close <- read.csv("train_close_own_data_square.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
train_logclose <- read.csv("train_logclose_own_data_square.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
train_logreturns <- read.csv("train_logreturns_own_data_square.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA_own_data_squared.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
rawResiduals_ARIMA_SVR <- read.csv("rawResiduals_ARIMA_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA_SVR <- rawResiduals_ARIMA_SVR$V1
NL_Test_rawResiduals_ARIMA_SVR <- nonlinearityTest(rawResiduals_ARIMA_SVR, verbose = TRUE)
train_close <- read.csv("train_close_own_data_square.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
train_logclose <- read.csv("train_logclose_own_data_square.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
train_logreturns <- read.csv("train_logreturns_own_data_square.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA_own_data_squared.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
rawResiduals_ARIMA_SVR <- read.csv("rawResiduals_ARIMA_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA_SVR <- rawResiduals_ARIMA_SVR$V1
NL_Test_rawResiduals_ARIMA_SVR <- nonlinearityTest(rawResiduals_ARIMA_SVR, verbose = TRUE)
library(tseriesEntropy)
library(nonlinearTseries)
train_close <- read.csv("train_close_own_data_square.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
S_train_close <- Srho.test.AR.p(train_close, lag.max=5, B=40);
train_logclose <- read.csv("train_logclose_own_data_square.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
S_train_logclose <- Srho.test.AR.p(train_logclose, lag.max=5, B=40);
train_logreturns <- read.csv("train_logreturns_own_data_square.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
S_train_logreturns <- Srho.test.AR.p(train_logreturns, lag.max=5, B=40);
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
S_rawResiduals_ARIMA <- Srho.test.AR.p(rawResiduals_ARIMA, lag.max=5, B=40);
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA_own_data_squared.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
S_stanResiduals_ARIMA <- Srho.test.AR.p(stanResiduals_ARIMA, lag.max=5, B=40);
rawResiduals_ARIMA_SVR <- read.csv("rawResiduals_ARIMA_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_ARIMA_SVR <- rawResiduals_ARIMA_SVR$V1
NL_Test_rawResiduals_ARIMA_SVR <- nonlinearityTest(rawResiduals_ARIMA_SVR, verbose = TRUE)
S_rawResiduals_ARIMA_SVR <- Srho.test.AR.p(rawResiduals_ARIMA_SVR, lag.max=5, B=40);
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
train_logclose <- read.csv("train_logclose_own_data1.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
train_logreturns <- read.csv("train_logreturns_own_data1.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
NL_Test_rawResiduals_ARIMA <- white.test(rawResiduals_ARIMA, verbose = TRUE)
white.test(rawResiduals_ARIMA, lag = 1, qstar = 2, q = 10, range = 4,
type = c("Chisq","F"), scale = TRUE, ...)
NL_Test_stanResiduals_ARIMA
NL_Test_stanResiduals_ARIMA$White
NL_Test_stanResiduals_ARIMA$White$p.value
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- numeric(num_runs)  # Initialize vector to store p-values
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)  # Run nonlinearity test
p_values[i] <- test_result$White$p.value  # Extract White test p-value
}
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
r= result$sorted_p_values
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
num <- c(0.070, 0.975, 0.623, 0.749, 0.451)
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
p_values <- c(0.070, 0.975, 0.623, 0.749, 0.451)
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- c(0.070, 0.975, 0.623, 0.749, 0.451)
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- c(0.001, 0.001, 0.243, 0.003, 0.053)
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- c(0.024,0.024,0.024,0.024,0.024)
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
# Function to run nonlinearity test multiple times and compute improved Bonferroni bound
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- c(0.288,0.277,0.289,0.283,0.283)
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
run_nonlinearity_tests <- function(data, num_runs = 10) {
p_values <- numeric(num_runs)  # Initialize vector to store p-values
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)  # Run nonlinearity test
p_values[i] <- test_result$White$p.value  # Extract White test p-value
}
p_values <- sort(p_values)  # Sort p-values in ascending order
# Compute improved Bonferroni bound
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
# Example usage
# Assuming train_close is a time series dataset
data <- train_close  # Replace with actual data
result <- run_nonlinearity_tests(data, num_runs = 10)
# Print results
print(result)
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 10)
# Function to run nonlinearity test multiple times
#and compute improved Bonferroni bound on Whites results
BB_White <- function(data, num_runs = 5) {
p_values <- numeric(num_runs)
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)
p_values[i] <- test_result$White$p.value
}
p_values <- sort(p_values)
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
return(list(sorted_p_values = p_values, improved_bonferroni_bound = alpha))
}
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 10)
print(BB_White_train_close)
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close)
print(BB_White_train_close)
BB_White_train_close <- BB_White(train_close)
print(BB_White_train_close)
BB_White_train_close <- BB_White(train_close, num_runs = 50)
print(BB_White_train_close)
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
print(BB_White_train_close)
# Function to run nonlinearity test multiple times
#and compute improved Bonferroni bound on Whites results
BB_White <- function(data, num_runs = 5) {
p_values <- numeric(num_runs)
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)
p_values[i] <- test_result$White$p.value
}
p_values <- sort(p_values)
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
results = list(sorted_p_values = p_values, improved_bonferroni_bound = alpha)
print(results)
return(results)
}
train_close <- read.csv("train_close_own_data1.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
train_logclose <- read.csv("train_logclose_own_data1.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
train_logreturns <- read.csv("train_logreturns_own_data1.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
BB_White_train_close <- BB_White(train_logclose, num_runs = 5)
train_logreturns <- read.csv("train_logreturns_own_data1.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
BB_White_train_close <- BB_White(train_logreturns, num_runs = 5)
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA_own_data1.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
BB_White_train_close <- BB_White(rawResiduals_ARIMA, num_runs = 5)
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA_own_data1.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
BB_White_train_close <- BB_White(stanResiduals_ARIMA, num_runs = 5)
rawResiduals_ARIMAGARCH <- read.csv("rawResiduals_ARIMAGARCH_own_data1.csv", header = FALSE)
rawResiduals_ARIMAGARCH <- rawResiduals_ARIMAGARCH$V1
NL_Test_rawResiduals_ARIMAGARCH <- nonlinearityTest(rawResiduals_ARIMAGARCH, verbose = TRUE)
BB_White_train_close <- BB_White(rawResiduals_ARIMAGARCH, num_runs = 5)
stanResiduals_ARIMAGARCH <- read.csv("stanResiduals_ARIMAGARCH_own_data1.csv", header = FALSE)
stanResiduals_ARIMAGARCH <- stanResiduals_ARIMAGARCH$V1
NL_Test_stanResiduals_ARIMAGARCH <- nonlinearityTest(stanResiduals_ARIMAGARCH, verbose = TRUE)
BB_White_train_close <- BB_White(stanResiduals_ARIMAGARCH, num_runs = 5)
rawResiduals_SVR <- read.csv("rawResiduals_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_SVR <- rawResiduals_SVR$V1
NL_Test_rawResiduals_SVR <- nonlinearityTest(rawResiduals_SVR, verbose = TRUE)
S_rawResiduals_SVR <- Srho.test.AR.p(rawResiduals_SVR, lag.max=5, B=40);
whiteNoise <- rnorm(n = 1000, mean = 0, sd = 1) # Generates 1000 samples of white noise
rawResiduals_SVR <- read.csv("rawResiduals_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_SVR <- rawResiduals_SVR$V1
NL_Test_rawResiduals_SVR <- nonlinearityTest(whiteNoise, verbose = TRUE)
whiteNoise <- rnorm(n = 1000, mean = 0, sd = 1) # Generates 1000 samples of white noise
rawResiduals_SVR <- read.csv("rawResiduals_SVR_own_data_squared.csv", header = FALSE)
rawResiduals_SVR <- rawResiduals_SVR$V1
NL_Test_rawResiduals_SVR <- nonlinearityTest(whiteNoise, verbose = TRUE)
nonlinearityTest
library(tseriesEntropy)
library(nonlinearTseries)
nonlinearityTest
?mcleodLiTest
mcleodLiTest
Terasvirta
terasvirta.test
library(nonlinearTseries)
library(nonlinearTseries)
terasvirta.test
mcleodLiTest
tseries::terasvirta.test
keenanTest
terasvirta.test
tseries::white.test
white.test
white
terasvirta.test
terasvirta.test()
terasvirta.test?
tseries::terasvirta.test?
library(nonlinearTseries)nonlinearityTest
nonlinearityTest
tseries::terasvirta.test
terasvirta.test
nonlinearityTest?
?terasvirta.test
?terasvirta.test
terasvirta.test
# Load the package (if not already loaded)
library(tseries)
# Print the function code
terasvirta.test
tsayTest
keenanTest
thresholdTest
library(tseriesEntropy)
library(nonlinearTseries)
nonlinearityTest
terasvirta
terasvirta.test
tseries::terasvirta.test
white.test
tsayTest
tseries::white.test
white.test
nltests$White
R.version.string
train_close <- read.csv("train_close.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
train_logclose <- read.csv("train_logclose.csv", header = FALSE)
install.packages("here")
library(tseriesEntropy)
library(nonlinearTseries)
library(here)
train_close <- read.csv("train_close.csv", header = FALSE)
library(tseriesEntropy)
library(nonlinearTseries)
library(here)
setwd(here())
train_close <- read.csv("train_close.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
train_logclose <- read.csv("train_logclose.csv", header = FALSE)
setwd(here())
library(tseriesEntropy)
library(nonlinearTseries)
train_close <- read.csv("train_close.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
train_close <- read.csv("train_close.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
library(tseriesEntropy)
library(nonlinearTseries)
library(here)
setwd(here())
# Function to run nonlinearity test multiple times
#and compute improved Bonferroni bound on Whites results
BB_White <- function(data, num_runs = 5) {
p_values <- numeric(num_runs)
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)
p_values[i] <- test_result$White$p.value
}
p_values <- sort(p_values)
m <- length(p_values)
alpha <- min((m - (1:m) + 1) * p_values)
results = list(sorted_p_values = p_values, improved_bonferroni_bound = alpha)
print(results)
return(results)
}
train_close <- read.csv("train_close.csv", header = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioapi")
for (i in 1:num_runs) {
test_result <- nonlinearityTest(data, verbose = FALSE)
p_values[i] <- test_result$White$p.value
}
train_close <- read.csv("train_close.csv", header = FALSE)
library(tseriesEntropy)
library(nonlinearTseries)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
train_close <- read.csv("train_close.csv", header = FALSE)
train_close <- train_close$V1
NL_Test_train_close <- nonlinearityTest(train_close, verbose = TRUE)
BB_White_train_close <- BB_White(train_close, num_runs = 5)
train_logclose <- read.csv("train_logclose.csv", header = FALSE)
train_logclose <- train_logclose$V1
NL_Test_train_logclose <- nonlinearityTest(train_logclose, verbose = TRUE)
BB_White_train_logclose <- BB_White(train_logclose, num_runs = 5)
train_logreturns <- read.csv("train_logreturns.csv", header = FALSE)
train_logreturns <- train_logreturns$V1
NL_Test_train_logreturns <- nonlinearityTest(train_logreturns, verbose = TRUE)
BB_White_train_logreturns <- BB_White(train_logreturns, num_runs = 5)
rawResiduals_ARIMA <- read.csv("rawResiduals_ARIMA.csv", header = FALSE)
rawResiduals_ARIMA <- rawResiduals_ARIMA$V1
NL_Test_rawResiduals_ARIMA <- nonlinearityTest(rawResiduals_ARIMA, verbose = TRUE)
BB_White_rawResiduals_ARIMA <- BB_White(rawResiduals_ARIMA, num_runs = 5)
stanResiduals_ARIMA <- read.csv("stanResiduals_ARIMA.csv", header = FALSE)
stanResiduals_ARIMA <- stanResiduals_ARIMA$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA, verbose = TRUE)
BB_White_stanResiduals_ARIMA <- BB_White(stanResiduals_ARIMA, num_runs = 5)
rawResiduals_ARIMA_t <- read.csv("rawResiduals_ARIMA_t.csv", header = FALSE)
rawResiduals_ARIMA_t <- rawResiduals_ARIMA_t$V1
NL_Test_rawResiduals_ARIMA_t <- nonlinearityTest(rawResiduals_ARIMA_t, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t <- BB_White(rawResiduals_ARIMA_t, num_runs = 5)
stanResiduals_ARIMA_t <- read.csv("stanResiduals_ARIMA_t.csv", header = FALSE)
stanResiduals_ARIMA_t <- stanResiduals_ARIMA_t$V1
NL_Test_stanResiduals_ARIMA <- nonlinearityTest(stanResiduals_ARIMA_t, verbose = TRUE)
BB_White_stanResiduals_ARIMA_t <- BB_White(stanResiduals_ARIMA_t, num_runs = 5)
rawResiduals_ARIMA_GARCH <- read.csv("rawResiduals_ARIMA_GARCH.csv", header = FALSE)
rawResiduals_ARIMA_GARCH <- rawResiduals_ARIMA_GARCH$V1
NL_Test_rawResiduals_ARIMA_GARCH <- nonlinearityTest(rawResiduals_ARIMA_GARCH, verbose = TRUE)
BB_White_rawResiduals_ARIMA_GARCH <- BB_White(rawResiduals_ARIMA_GARCH, num_runs = 5)
stanResiduals_ARIMA_GARCH <- read.csv("stanResiduals_ARIMA_GARCH.csv", header = FALSE)
stanResiduals_ARIMA_GARCH <- stanResiduals_ARIMA_GARCH$V1
NL_Test_stanResiduals_ARIMA_GARCH <- nonlinearityTest(stanResiduals_ARIMA_GARCH, verbose = TRUE)
BB_White_stanResiduals_ARIMA_GARCH <- BB_White(stanResiduals_ARIMA_GARCH, num_runs = 5)
rawResiduals_ARIMA_t_GARCH_t <- read.csv("rawResiduals_ARIMA_t_GARCH_t.csv", header = FALSE)
rawResiduals_ARIMA_t_GARCH_t <- rawResiduals_ARIMA_t_GARCH_t$V1
NL_Test_rawResiduals_ARIMA_t_GARCH_t <- nonlinearityTest(rawResiduals_ARIMA_t_GARCH_t, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_GARCH_t <- BB_White(rawResiduals_ARIMA_t_GARCH_t, num_runs = 5)
stanResiduals_ARIMA_t_GARCH_t <- read.csv("stanResiduals_ARIMA_t_GARCH_t.csv", header = FALSE)
stanResiduals_ARIMA_t_GARCH_t <- stanResiduals_ARIMA_t_GARCH_t$V1
NL_Test_stanResiduals_ARIMA_GARCH <- nonlinearityTest(stanResiduals_ARIMA_t_GARCH_t, verbose = TRUE)
BB_White_stanResiduals_ARIMA_t_GARCH_t <- BB_White(stanResiduals_ARIMA_t_GARCH_t, num_runs = 5)
rawResiduals_SVR_BO_standardscaler <- read.csv("rawResiduals_SVR_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_SVR_BO_standardscaler <- rawResiduals_SVR_BO_standardscaler$V1
NL_Test_rawResiduals_SVR_BO_standardscaler <- nonlinearityTest(rawResiduals_SVR_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_SVR_BO_standardscaler <- BB_White(rawResiduals_SVR_BO_standardscaler, num_runs = 5)
rawResiduals_SVR_BO_robustscaler <- read.csv("rawResiduals_SVR_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_SVR_BO_robustscaler <- rawResiduals_SVR_BO_robustscaler$V1
NL_Test_rawResiduals_SVR_BO_robustscaler <- nonlinearityTest(rawResiduals_SVR_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_SVR_BO_robustscaler <- BB_White(rawResiduals_SVR_BO_robustscaler, num_runs = 5)
rawResiduals_ARIMA_t_SVR_BO_standardscaler <- read.csv("rawResiduals_ARIMA_t_SVR_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_SVR_BO_standardscaler <- rawResiduals_ARIMA_t_SVR_BO_standardscaler$V1
NL_Test_rawResiduals_ARIMA_t_SVR_BO_standardscaler <- nonlinearityTest(rawResiduals_ARIMA_t_SVR_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_SVR_BO_standardscaler <- BB_White(rawResiduals_ARIMA_t_SVR_BO_standardscaler, num_runs = 5)
rawResiduals_ARIMA_t_SVR_BO_robustscaler <- read.csv("rawResiduals_ARIMA_t_SVR_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_SVR_BO_robustscaler <- rawResiduals_ARIMA_t_SVR_BO_robustscaler$V1
NL_Test_rawResiduals_ARIMA_t_SVR_BO_robustscaler <- nonlinearityTest(rawResiduals_ARIMA_t_SVR_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_SVR_BO_robustscaler <- BB_White(rawResiduals_ARIMA_t_SVR_BO_robustscaler, num_runs = 5)
rawResiduals_FNN_BO_standardscaler <- read.csv("rawResiduals_FNN_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_FNN_BO_standardscaler <- rawResiduals_FNN_BO_standardscaler$V1
NL_Test_rawResiduals_FNN_BO_standardscaler <- nonlinearityTest(rawResiduals_FNN_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_FNN_BO_standardscaler <- BB_White(rawResiduals_FNN_BO_standardscaler, num_runs = 5)
rawResiduals_FNN_BO_robustscaler <- read.csv("rawResiduals_FNN_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_FNN_BO_robustscaler <- rawResiduals_FNN_BO_robustscaler$V1
NL_Test_rawResiduals_FNN_BO_robustscaler <- nonlinearityTest(rawResiduals_FNN_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_FNN_BO_robustscaler <- BB_White(rawResiduals_FNN_BO_robustscaler, num_runs = 5)
rawResiduals_LSTM_BO_standardscaler <- read.csv("rawResiduals_LSTM_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_LSTM_BO_standardscaler <- rawResiduals_LSTM_BO_standardscaler$V1
NL_Test_rawResiduals_LSTM_BO_standardscaler <- nonlinearityTest(rawResiduals_LSTM_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_LSTM_BO_standardscaler <- BB_White(rawResiduals_LSTM_BO_standardscaler, num_runs = 5)
rawResiduals_LSTM_BO_robustscaler <- read.csv("rawResiduals_LSTM_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_LSTM_BO_robustscaler <- rawResiduals_LSTM_BO_robustscaler$V1
NL_Test_rawResiduals_LSTM_BO_robustscaler <- nonlinearityTest(rawResiduals_LSTM_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_LSTM_BO_robustscaler <- BB_White(rawResiduals_LSTM_BO_robustscaler, num_runs = 5)
rawResiduals_ARIMA_t_FNN_BO_standardscaler <- read.csv("rawResiduals_ARIMA_t_FNN_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_FNN_BO_standardscaler <- rawResiduals_ARIMA_t_FNN_BO_standardscaler$V1
NL_Test_rawResiduals_ARIMA_t_FNN_BO_standardscaler <- nonlinearityTest(rawResiduals_ARIMA_t_FNN_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_FNN_BO_standardscaler <- BB_White(rawResiduals_ARIMA_t_FNN_BO_standardscaler, num_runs = 5)
rawResiduals_ARIMA_t_FNN_BO_robustscaler <- read.csv("rawResiduals_ARIMA_t_FNN_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_FNN_BO_robustscaler <- rawResiduals_ARIMA_t_FNN_BO_robustscaler$V1
NL_Test_rawResiduals_ARIMA_t_FNN_BO_robustscaler <- nonlinearityTest(rawResiduals_ARIMA_t_FNN_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_FNN_BO_robustscaler <- BB_White(rawResiduals_ARIMA_t_FNN_BO_robustscaler, num_runs = 5)
rawResiduals_ARIMA_t_LSTM_BO_standardscaler <- read.csv("rawResiduals_ARIMA_t_LSTM_BO-TPE_standardscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_LSTM_BO_standardscaler <- rawResiduals_ARIMA_t_LSTM_BO_standardscaler$V1
NL_Test_rawResiduals_ARIMA_t_LSTM_BO_standardscaler <- nonlinearityTest(rawResiduals_ARIMA_t_LSTM_BO_standardscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_LSTM_BO_standardscaler <- BB_White(rawResiduals_ARIMA_t_LSTM_BO_standardscaler, num_runs = 5)
rawResiduals_ARIMA_t_LSTM_BO_robustscaler <- read.csv("rawResiduals_ARIMA_t_LSTM_BO-TPE_robustscaler.csv", header = FALSE)
rawResiduals_ARIMA_t_LSTM_BO_robustscaler <- rawResiduals_ARIMA_t_LSTM_BO_robustscaler$V1
NL_Test_rawResiduals_ARIMA_t_LSTM_BO_robustscaler <- nonlinearityTest(rawResiduals_ARIMA_t_LSTM_BO_robustscaler, verbose = TRUE)
BB_White_rawResiduals_ARIMA_t_LSTM_BO_robustscaler <- BB_White(rawResiduals_ARIMA_t_LSTM_BO_robustscaler, num_runs = 5)
